#!/usr/bin/env node

const ICON_BUILD_DIR = "__icon__" + Date.now();

require('shelljs/global');
var fs = require('fs');
var gm = require('gm');
var path = require('path');
var imageMagick = gm.subClass({ imageMagick : true });

var program = require('commander');
program
  .version(require("../package.json").version)
    .usage("")
  .parse(process.argv);
var args = program.args;

if (args.length == 0) {
    console.log('Usage：icon-build ${ICON_PATH_1024*1024}'); 
    return;
}

var filePath = args[0];
if (!fs.existsSync(filePath)) {
    console.log('PATH ERROR： ' + filePath);;
    return;
}

var extname = path.extname(filePath);
if (extname != '.png') {
    console.log('FILE_EXT_ERROR. please rename icon file like **.png');
    return;
};

gm(filePath)
.size(function (err, size) {
    if (err) {
        console.log('FILE ERROR：file type error');    
        return;
    }
    
    if (size.height != size.width || size.height < 1024 && size.width < 1024) {
        console.log('FILE ERROR：please check your icon size.');    
        return;
    }
});

// prepare build dir
exec('mkdir ' + ICON_BUILD_DIR);

// read conf
var icons = JSON.parse(fs.readFileSync(__dirname + '/../conf/ios.conf', 'utf-8')).icons;

// start 
create(filePath, icons);

function create (sourcePath, iconConf){
	for (var i = 0; i < icons.length; i++) {
		var icon = icons[i];
		iconResize(sourcePath, icon.width, icon.height, ICON_BUILD_DIR + '/' + icon.name);		
	};
}

function iconResize(sourcePath, sizeWidth, sizeHeight, filePath) {
	imageMagick(sourcePath)
    .resize(sizeWidth, sizeHeight)
    .autoOrient()
    .write(filePath, function(err){
     	if (err) {
     		console.log('resize failed  ' + filePath);
     	}else {
     		console.log('resize success  ' + filePath);
     	}
    });	
}
